name: Pull Request

on:
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  BUILD_STRING: "${{ github.run_number }}-${{ github.sha }}"

jobs:
  check:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.46.3

      - uses: actions/cache/restore@v4
        name: Restore deno modules
        id: cache-deno-modules-restore
        with:
          path: ~/.cache/deno
          key: deno-modules

      - name: Run check
        run: deno task check

      - name: Cache deno-modules
        id: cache-deno-modules-save
        uses: actions/cache/save@v4
        with:
          path: ~/.cache/deno
          key: deno-modules

  test_web:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpw
          POSTGRES_DB: vha_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.46.3

      - uses: actions/cache/restore@v4
        name: Restore deno modules
        id: cache-deno-modules-restore
        with:
          path: ~/.cache/deno
          key: deno-modules

      - name: Write .env file
        run: |
          echo "DATABASE_URL=postgres://testuser:testpw@localhost:5432/vha_test" > .env
          echo "GOOGLE_MAPS_API_KEY=TEST_GOOGLE_MAPS_API_KEY" >> .env
          echo "SKIP_GOOGLE_MAPS=true" >> .env

      - name: Migrate database
        run: deno task db:migrate all

      - name: Run build
        run: deno task build

      - name: Run tests
        run: deno task test --skip-migrate-check

      - name: Cache deno-modules
        id: cache-deno-modules-save
        uses: actions/cache/save@v4
        with:
          path: ~/.cache/deno
          key: deno-modules

  test_chatbot:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpw
          POSTGRES_DB: vha_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.46.3

      - uses: actions/cache/restore@v4
        name: Restore deno modules
        id: cache-deno-modules-restore
        with:
          path: ~/.cache/deno
          key: deno-modules

      - name: Write .env file
        run: |
          echo "DATABASE_URL=postgres://testuser:testpw@localhost:5432/vha_test" > .env
          echo "GOOGLE_MAPS_API_KEY=TEST_GOOGLE_MAPS_API_KEY" >> .env
          echo "SKIP_GOOGLE_MAPS=true" >> .env

      - name: Migrate database
        run: deno task db:migrate all

      - name: Run tests
        run: deno task test:chatbot

      - name: Cache deno-modules
        id: cache-deno-modules-save
        uses: actions/cache/save@v4
        with:
          path: ~/.cache/deno
          key: deno-modules

  build_container:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t vha .

  compile_others:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.46.3

      - name: Compile chatbot
        run: deno task compile:chatbot

  compile_web:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.46.3

      - name: Build web
        run: deno task build

      - name: Compile web
        run:  deno task compile:web