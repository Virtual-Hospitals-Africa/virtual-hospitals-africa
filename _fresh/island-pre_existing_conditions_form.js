import{a as C,b as p}from"./chunk-HQOIGX27.js";import"./chunk-BVIJGXPE.js";import"./chunk-L62ZOWJZ.js";import"./chunk-ETJ2VVH2.js";import"./chunk-FKUAOK4K.js";import"./chunk-IE6PGXBN.js";import{a as c}from"./chunk-LTMG5A4G.js";import"./chunk-AO25SZVF.js";import"./chunk-AAS3MA3C.js";import"./chunk-6NEEI67K.js";import"./chunk-XBB34SOY.js";import"./chunk-QPM7RCMO.js";import"./chunk-EAMMLKIP.js";import"./chunk-HO4JABHR.js";import"./chunk-FB5V53QR.js";import"./chunk-G73ZFE37.js";import{a as m}from"./chunk-DZI5S33S.js";import"./chunk-7QVJUEYK.js";import{a as e}from"./chunk-D7WMKMTL.js";import"./chunk-AKT74HKI.js";var g=(d=[])=>{let n=new Map;for(let o of d){let s=new Set,t=new Set;for(let i of o.comorbidities)s.add(i.id);for(let i of o.medications)t.add(i.id);n.set(o.id,{comorbidities:s,medications:t})}return n};function x({preExistingConditions:d}){let[n,o]=m(g(d)),s=()=>{let t=C(),i=new Map(n);i.set(t,{comorbidities:new Set,medications:new Set}),o(new Map(i))};return e("div",{children:[Array.from(n.entries()).map(([t,i],f)=>e(p,{condition_id:t,condition_index:f,condition_state:i,preExistingConditions:d,removeCondition:()=>{let r=new Map(n);r.delete(t),o(new Map(r))},updateCondition:r=>{let a=new Map(n);a.set(t,r),o(new Map(a))}})),e(c,{text:"Add Condition",onClick:s})]})}export{x as default};
